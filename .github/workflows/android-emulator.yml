name: Run ARCore Emulator

on:
  push:
    branches:
      - main

jobs:
  setup-emulator:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Android SDK Tools
        run: |
          export ANDROID_HOME=$HOME/android-sdk
          mkdir -p $ANDROID_HOME/cmdline-tools
          cd $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O tools.zip
          unzip tools.zip
          mv cmdline-tools latest
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator" >> $GITHUB_ENV

      - name: Accept Android SDK Licenses
        run: |
          source $GITHUB_ENV
          yes | sdkmanager --licenses

      - name: Install Android SDK Components
        run: |
          source $GITHUB_ENV
          sdkmanager "platform-tools" \
                     "platforms;android-33" \
                     "system-images;android-33;google_apis_playstore;x86_64" \
                     "emulator" \
                     "build-tools;33.0.0"

      - name: Set up AVD Home
        run: |
          export ANDROID_AVD_HOME=$HOME/.android/avd
          echo "ANDROID_AVD_HOME=$ANDROID_AVD_HOME" >> $GITHUB_ENV

      - name: Create AVD
        run: |
          source $GITHUB_ENV
          avdmanager create avd --force --name pixel4_arcore \
                                --package "system-images;android-33;google_apis_playstore;x86_64" \
                                --device "pixel_4"

      - name: Check AVD List
        run: |
          source $GITHUB_ENV
          avdmanager list avd

      - name: Debug AVD Files
        run: |
          source $GITHUB_ENV
          ls -R $HOME/.android/avd

      - name: Start Emulator
        run: |
          source $GITHUB_ENV
          nohup emulator -avd pixel4_arcore -no-window -no-audio -gpu swiftshader_indirect > emulator.log 2>&1 &
          adb wait-for-device
          adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "Emulator is ready."

        continue-on-error: true

      - name: Check if Log Exists
        run: ls -l emulator.log || echo "emulator.log not found"

      - name: Verify Emulator
        run: adb devices

      - name: Upload Emulator Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: emulator-logs
          path: emulator.log
