name: Test ARCore Application

on:
  push:
    branches:
      - main

jobs:
  Run_Android_Emulator_for_ARCore:
    name: Run Android Emulator for ARCore
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # Étape 1 : Cloner le dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2 : Installer JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Étape 3 : Installer Android Command-line Tools
      - name: Install Android Command-line Tools
        run: |
          export ANDROID_HOME=$HOME/android-sdk
          mkdir -p $ANDROID_HOME/cmdline-tools
          cd $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O commandlinetools.zip
          unzip commandlinetools.zip
          mv cmdline-tools latest
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV

      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: $HOME/android-sdk
          key: ${{ runner.os }}-android-sdk
          restore-keys: |
            ${{ runner.os }}-android-sdk


      # Étape 4 : Accepter les licences Android SDK
      - name: Accept Android SDK Licenses
        run: |
          source $GITHUB_ENV
          yes | sdkmanager --licenses

      # Étape 5 : Installer les composants nécessaires
      - name: Install Android SDK Components
        run: |
          source $GITHUB_ENV
          sdkmanager "platform-tools" "platforms;android-33" "system-images;android-33;google_apis;x86_64" "emulator" "build-tools;33.0.0"

     # Étape 6 : Configurer un AVD pour Pixel 4
      - name: Configure AVD
        run: |
          export ANDROID_AVD_HOME=$HOME/.android/avd
          mkdir -p $ANDROID_AVD_HOME
          sdkmanager "system-images;android-33;google_apis;x86_64"
          avdmanager create avd --force --name pixel4_test --device "pixel" --package "system-images;android-33;google_apis;x86_64"

     # Étape 7 : Vérifier la configuration de l'AVD
      - name: Verify AVD Configuration
        run: |
          avdmanager list avd
          echo "AVD directory: $ANDROID_AVD_HOME"
          ls -la $ANDROID_AVD_HOME

     # Étape 8 : Démarrer l'émulateur
      - name: Start Emulator
        run: |
          export ANDROID_AVD_HOME=$HOME/.android/avd
          nohup emulator @pixel4_test -no-window -no-audio -gpu swiftshader_indirect > emulator.log 2>&1 &
          adb devices
          adb wait-for-device
          adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "Emulator is ready"

        continue-on-error: true

      - name: Check if Log Exists
        run: ls -l emulator.log || echo "emulator.log not found"

      # Télécharger les logs même en cas d'échec
      - name: Upload Emulator Logs
        if: always()  # S'assure que cette étape est exécutée même si les autres échouent
        uses: actions/upload-artifact@v3
        with:
          name: emulator-log
          path: emulator.log


      # Étape 9 : Installer et exécuter l'APK
      - name: Install and Test APK
        run: |
          source $GITHUB_ENV
          adb install build/app/outputs/flutter-apk/app-release.apk
          adb shell am start -n com.example.app/.MainActivity
          adb logcat -d > logcat.txt

      # Étape 10 : Télécharger les journaux
      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: emulator-log
          path: logcat.txt
